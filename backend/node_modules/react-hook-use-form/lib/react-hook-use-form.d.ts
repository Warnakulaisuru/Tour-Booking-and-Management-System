export interface FormHookOutput<T> {
    /** Reset the form to its initial values */
    clear: () => void;
    /**
     * Returns an object of functions to be used with an input, see `ControlledInput`
     */
    controlledInput: <K extends keyof T>(field: K) => ControlledInput<T, K>;
    /** The current data object */
    data: T;
    /**
     * The function passed as a callback will be called when the form is submitted.
     *
     * @param cb Callback function that is passed the current data object when the form is submitted.
     */
    onSubmit: (cb: (data: T) => void) => void;
    /**
     * Defines a validator for the form
     *
     * @param field The field to validate.
     * @param validator The function to validate the field, should return a boolean for valid status.
     */
    validate: <K extends keyof T>(field: K, validator: (value: T[K], data: T) => boolean) => void;
    /**
     * Check the validation status of the form or field.
     *
     * @param field (Optional), if supplied the validation status of the given field will be returned, otherwise the whole forms status will be returned.
     */
    valid: (field?: keyof T) => boolean;
    /**
     * Bind to a field, used to quickly setup <input> tags
     *
     * @param field The field to bind this input to.
     */
    bind: <K extends keyof T>(field: K) => ControlledInput<T, K>["bind"];
    /**
     * Binds the form to `useForm`.
     *
     * Use as `<form {...formBind()}>`
     */
    formBind: () => {
        onSubmit: (e: any) => void;
    };
    /**
     * Set the data to the supplied data.
     *
     * @param data The new data object to use.
     */
    set: (data: Partial<T>) => void;
    /**
     * Returns the required fields for a label.
     */
    label: <K extends keyof T>(field: K) => {
        for: string;
    };
    /**
     * Has the value changed from its original.
     *
     * @param field (Optional) limit search to a single field.
     */
    changed: (field?: keyof T) => boolean;
}
export interface ControlledInput<T, K extends keyof T = keyof T> {
    /** The field controlled by these functions. */
    field: K;
    /** The fields current value. */
    value: T[K];
    /** Set the fields value to the supplied value. */
    update: (newValue: T[K]) => void;
    /** Is the current field value valid? */
    valid: () => boolean;
    /** Bind to an input */
    bind: {
        value: T[K];
        onChange: (e: any) => void;
        name: K;
        'aria-label': string;
        id: string;
    };
}
export interface UseFormOptions {
    ariaModel: string;
}
export declare function useForm<T>(initialData: T, options?: UseFormOptions): FormHookOutput<T>;
